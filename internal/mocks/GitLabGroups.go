// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "github.com/xanzy/go-gitlab"
)

// GitLabGroups is an autogenerated mock type for the GitLabGroups type
type GitLabGroups struct {
	mock.Mock
}

type GitLabGroups_Expecter struct {
	mock *mock.Mock
}

func (_m *GitLabGroups) EXPECT() *GitLabGroups_Expecter {
	return &GitLabGroups_Expecter{mock: &_m.Mock}
}

// ListGroupProjects provides a mock function with given fields: gid, opt, options
func (_m *GitLabGroups) ListGroupProjects(gid interface{}, opt *gitlab.ListGroupProjectsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Project, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*gitlab.Project
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListGroupProjectsOptions, ...gitlab.RequestOptionFunc) []*gitlab.Project); ok {
		r0 = rf(gid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Project)
		}
	}

	var r1 *gitlab.Response
	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListGroupProjectsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListGroupProjectsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GitLabGroups_ListGroupProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupProjects'
type GitLabGroups_ListGroupProjects_Call struct {
	*mock.Call
}

// ListGroupProjects is a helper method to define mock.On call
//  - gid interface{}
//  - opt *gitlab.ListGroupProjectsOptions
//  - options ...gitlab.RequestOptionFunc
func (_e *GitLabGroups_Expecter) ListGroupProjects(gid interface{}, opt interface{}, options ...interface{}) *GitLabGroups_ListGroupProjects_Call {
	return &GitLabGroups_ListGroupProjects_Call{Call: _e.mock.On("ListGroupProjects",
		append([]interface{}{gid, opt}, options...)...)}
}

func (_c *GitLabGroups_ListGroupProjects_Call) Run(run func(gid interface{}, opt *gitlab.ListGroupProjectsOptions, options ...gitlab.RequestOptionFunc)) *GitLabGroups_ListGroupProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListGroupProjectsOptions), variadicArgs...)
	})
	return _c
}

func (_c *GitLabGroups_ListGroupProjects_Call) Return(_a0 []*gitlab.Project, _a1 *gitlab.Response, _a2 error) *GitLabGroups_ListGroupProjects_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}
