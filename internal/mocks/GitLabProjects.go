// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "github.com/xanzy/go-gitlab"
)

// GitLabProjects is an autogenerated mock type for the GitLabProjects type
type GitLabProjects struct {
	mock.Mock
}

type GitLabProjects_Expecter struct {
	mock *mock.Mock
}

func (_m *GitLabProjects) EXPECT() *GitLabProjects_Expecter {
	return &GitLabProjects_Expecter{mock: &_m.Mock}
}

// ListProjects provides a mock function with given fields: opt, options
func (_m *GitLabProjects) ListProjects(opt *gitlab.ListProjectsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Project, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*gitlab.Project
	if rf, ok := ret.Get(0).(func(*gitlab.ListProjectsOptions, ...gitlab.RequestOptionFunc) []*gitlab.Project); ok {
		r0 = rf(opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Project)
		}
	}

	var r1 *gitlab.Response
	if rf, ok := ret.Get(1).(func(*gitlab.ListProjectsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*gitlab.ListProjectsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GitLabProjects_ListProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjects'
type GitLabProjects_ListProjects_Call struct {
	*mock.Call
}

// ListProjects is a helper method to define mock.On call
//  - opt *gitlab.ListProjectsOptions
//  - options ...gitlab.RequestOptionFunc
func (_e *GitLabProjects_Expecter) ListProjects(opt interface{}, options ...interface{}) *GitLabProjects_ListProjects_Call {
	return &GitLabProjects_ListProjects_Call{Call: _e.mock.On("ListProjects",
		append([]interface{}{opt}, options...)...)}
}

func (_c *GitLabProjects_ListProjects_Call) Run(run func(opt *gitlab.ListProjectsOptions, options ...gitlab.RequestOptionFunc)) *GitLabProjects_ListProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(*gitlab.ListProjectsOptions), variadicArgs...)
	})
	return _c
}

func (_c *GitLabProjects_ListProjects_Call) Return(_a0 []*gitlab.Project, _a1 *gitlab.Response, _a2 error) *GitLabProjects_ListProjects_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}
