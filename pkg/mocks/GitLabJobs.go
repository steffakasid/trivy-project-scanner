// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	bytes "bytes"

	mock "github.com/stretchr/testify/mock"
	gitlab "github.com/xanzy/go-gitlab"
)

// GitLabJobs is an autogenerated mock type for the GitLabJobs type
type GitLabJobs struct {
	mock.Mock
}

type GitLabJobs_Expecter struct {
	mock *mock.Mock
}

func (_m *GitLabJobs) EXPECT() *GitLabJobs_Expecter {
	return &GitLabJobs_Expecter{mock: &_m.Mock}
}

// DownloadArtifactsFile provides a mock function with given fields: pid, refName, opt, options
func (_m *GitLabJobs) DownloadArtifactsFile(pid interface{}, refName string, opt *gitlab.DownloadArtifactsFileOptions, options ...gitlab.RequestOptionFunc) (*bytes.Reader, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, refName, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *bytes.Reader
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.DownloadArtifactsFileOptions, ...gitlab.RequestOptionFunc) *bytes.Reader); ok {
		r0 = rf(pid, refName, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bytes.Reader)
		}
	}

	var r1 *gitlab.Response
	if rf, ok := ret.Get(1).(func(interface{}, string, *gitlab.DownloadArtifactsFileOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, refName, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(interface{}, string, *gitlab.DownloadArtifactsFileOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, refName, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GitLabJobs_DownloadArtifactsFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadArtifactsFile'
type GitLabJobs_DownloadArtifactsFile_Call struct {
	*mock.Call
}

// DownloadArtifactsFile is a helper method to define mock.On call
//  - pid interface{}
//  - refName string
//  - opt *gitlab.DownloadArtifactsFileOptions
//  - options ...gitlab.RequestOptionFunc
func (_e *GitLabJobs_Expecter) DownloadArtifactsFile(pid interface{}, refName interface{}, opt interface{}, options ...interface{}) *GitLabJobs_DownloadArtifactsFile_Call {
	return &GitLabJobs_DownloadArtifactsFile_Call{Call: _e.mock.On("DownloadArtifactsFile",
		append([]interface{}{pid, refName, opt}, options...)...)}
}

func (_c *GitLabJobs_DownloadArtifactsFile_Call) Run(run func(pid interface{}, refName string, opt *gitlab.DownloadArtifactsFileOptions, options ...gitlab.RequestOptionFunc)) *GitLabJobs_DownloadArtifactsFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(*gitlab.DownloadArtifactsFileOptions), variadicArgs...)
	})
	return _c
}

func (_c *GitLabJobs_DownloadArtifactsFile_Call) Return(_a0 *bytes.Reader, _a1 *gitlab.Response, _a2 error) *GitLabJobs_DownloadArtifactsFile_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

// ListProjectJobs provides a mock function with given fields: pid, opts, options
func (_m *GitLabJobs) ListProjectJobs(pid interface{}, opts *gitlab.ListJobsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Job, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opts)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*gitlab.Job
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListJobsOptions, ...gitlab.RequestOptionFunc) []*gitlab.Job); ok {
		r0 = rf(pid, opts, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Job)
		}
	}

	var r1 *gitlab.Response
	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListJobsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opts, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListJobsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opts, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GitLabJobs_ListProjectJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectJobs'
type GitLabJobs_ListProjectJobs_Call struct {
	*mock.Call
}

// ListProjectJobs is a helper method to define mock.On call
//  - pid interface{}
//  - opts *gitlab.ListJobsOptions
//  - options ...gitlab.RequestOptionFunc
func (_e *GitLabJobs_Expecter) ListProjectJobs(pid interface{}, opts interface{}, options ...interface{}) *GitLabJobs_ListProjectJobs_Call {
	return &GitLabJobs_ListProjectJobs_Call{Call: _e.mock.On("ListProjectJobs",
		append([]interface{}{pid, opts}, options...)...)}
}

func (_c *GitLabJobs_ListProjectJobs_Call) Run(run func(pid interface{}, opts *gitlab.ListJobsOptions, options ...gitlab.RequestOptionFunc)) *GitLabJobs_ListProjectJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListJobsOptions), variadicArgs...)
	})
	return _c
}

func (_c *GitLabJobs_ListProjectJobs_Call) Return(_a0 []*gitlab.Job, _a1 *gitlab.Response, _a2 error) *GitLabJobs_ListProjectJobs_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}
